{
  "new_java_class": {
    "prefix": "new_java_class",
    "body": [
      "/* Copyright ${VIM:\\$USER_FULL_NAME$} - $CURRENT_YEAR */",
      "package ${TM_DIRECTORY/(.*)/${1:/upcase}/};",
      "",
      "import org.slf4j.Logger;",
      "import org.slf4j.LoggerFactory;",
      "",
      "/**",
      " * Main class for $1",
      " *",
      " * @author ${VIM:\\$USER_FULL_NAME$} [${VIM:\\$USER_EMAIL$}]",
      " * @since $CURRENT_DATE $CURRENT_MONTH_NAME $CURRENT_YEAR",
      " */",
      "public final class $TM_FILENAME_BASE {",
      " /** Logger! */",
      " private static final Logger log = LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      "",
      " /**",
      "  * Main.",
      "  *",
      "  * @param args Command line arguments.",
      "  */",
      " public static void main(final String[] args) throws CmdLineException {",
      "  $0",
      " }",
      "}"
    ],
    "description": "new_java_class"
  },
  "log": {
    "prefix": "Create a logger",
    "body": [
      " private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      " $0"
    ],
    "description": "log"
  },
  "logi": {
    "prefix": "Create a logger with imports",
    "body": [
      "import org.slf4j.Logger;",
      "import org.slf4j.LoggerFactory;",
      "",
      " private static final Logger log = LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      " $0"
    ],
    "description": "logi"
  },
  "int_to_string": {
    "prefix": "Convert int to string",
    "body": [
      "String str = String.valueOf(2);"
    ],
    "description": "int_to_string"
  },
  "string_to_int": {
    "prefix": "Convert string to int",
    "body": [
      "int i = Integer.parseInt(str);"
    ],
    "description": "string_to_int"
  },
  "file_append_text": {
    "prefix": "Append text to a file",
    "body": [
      "BufferedWriter out = null;",
      "try {",
      " out = new BufferedWriter(new FileWriter(”filename”, true));",
      " out.write(”aString”);",
      "} catch (IOException e) {",
      " // error processing code",
      "} finally {",
      " if (out != null) {",
      "  out.close();",
      " }",
      "}"
    ],
    "description": "file_append_text"
  },
  "@Value": {
    "prefix": "@Value",
    "body": [
      "// https://www.baeldung.com/spring-value-annotation",
      "@Value(\"\\${${1:propertyName}:${2:someDefault}}\")",
      "private String ${3:variableName};"
    ],
    "description": "@Value"
  },
  "init_map": {
    "prefix": "init_map",
    "body": [
      "public class VatTotalAccumulator {",
      "    private static final float ZERO_VAT = 0.0f;",
      "    private static final float STANDARD_VAT = 0.20f;",
      "    private static final float LOW_VAT = 0.05f;",
      "    private static Map<VatCategory, Percentage> vatRates = new EnumMap<VatCategory, Percentage>(VatCategory.class);",
      "",
      "    static {",
      "        vatRates.put(VatCategory.Zero, new Percentage(ZERO_VAT));",
      "        vatRates.put(VatCategory.Exempt, new Percentage(ZERO_VAT));",
      "        vatRates.put(VatCategory.Std, new Percentage(STANDARD_VAT));",
      "        vatRates.put(VatCategory.Low, new Percentage(LOW_VAT));",
      "    }",
      ""
    ],
    "description": "init_map"
  }
}
