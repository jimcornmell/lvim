{
  "new_bash_file": {
    "prefix": ["new_bash_file"],
    "body": [
      "#!/usr/bin/env bash",
      "",
      "# $1",
      "# E.g: $2",
      "",
      ". ~/bin/globals.sh",
      "",
      "if [ \\$# != 1 ]",
      "then",
      "\techo Usage: $3",
      "\texit 1",
      "fi",
      "",
      "$0"
    ],
    "description": "New bash file template."
  },
  "case_statement": {
    "prefix": ["case_statement"],
    "body": [
      "case $0 in",
      "\tPATTERN_1)",
      "\t\tSTATEMENTS",
      "\t\t;;",
      "",
      "\tPATTERN_2)",
      "\t\tSTATEMENTS",
      "\t\t;;",
      "",
      "\t*)",
      "\t\tSTATEMENTS",
      "\t\t;;",
      "esac"
    ],
    "description": "New bash file template."
  },
   "while_text_file": {
    "prefix": ["while_text_file"],
    "body": [
        "INPUT=\"data.cvs\"",
        "",
        "[ ! -f \\$INPUT ] && { echo \"\\$INPUT file not found\"; exit 99; }",
        "",
        "while IFS=\\$'\\\\t' read -r flname dob ssn tel status",
        "do",
        "\t$0echo \"Name : \\$flname\"",
        "\techo \"DOB : \\$dob\"",
        "\techo \"SSN : \\$ssn\"",
        "\techo \"Telephone : \\$tel\"",
        "\techo \"Status : \\$status\"",
        "done <\"\\$INPUT\""
    ],
    "description": "New while loop iterating over lines in tsv file."
  },
  "if_statement": {
    "prefix": ["if_statement"],
    "body": [
        "if [[ \\$val -ne 0 ]]",
        "then",
        "    $0",
        "elif [[ \\$val -ne 0 ]]",
        "    x=\\$((x-1))",
        "else",
        "    x=\"\\$x\\n\\$line\"",
        "fi"
    ],
    "description": "If statement and conditionals"
  },
  "if_statement_full": {
    "prefix": ["if_statement_full"],
    "body": [
        "# See: https://www.assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/",
        "$0# ! EXPRESSION             The EXPRESSION is false.",
        "# -n STRING                The length of STRING is greater than zero.",
        "# -z STRING                The lengh of STRING is zero (ie it is empty).",
        "# STRING1 = STRING2        STRING1 is equal to STRING2",
        "# STRING1 != STRING2       STRING1 is not equal to STRING2",
        "# INTEGER1 -eq INTEGER2    INTEGER1 is numerically equal to INTEGER2",
        "# INTEGER1 -gt INTEGER2    INTEGER1 is numerically greater than INTEGER2",
        "# INTEGER1 -lt INTEGER2    INTEGER1 is numerically less than INTEGER2",
        "# -d FILE                  FILE exists and is a directory.",
        "# -e FILE                  FILE exists.",
        "# -r FILE                  FILE exists and the read permission is granted.",
        "# -s FILE                  FILE exists and it's size is greater than zero (ie. it is not empty).",
        "# -w FILE                  FILE exists and the write permission is granted.",
        "# -x FILE                  FILE exists and the execute permission is granted.",
        "if [[ \"\\$line\" = *\"--\"* ]] || [ \"\\$line\" = \"#\"* ]",
        "if [[ \"\\$line\" != *\"--\"* ]] && [ \"\\$line\" != \"#\"* ]",
        "if [[ \"\\$line\" != *\"#\"* ]]",
        "if [[ \\$val -ne 0 ]]",
        "then",
        "    x=\\$((x+1))",
        "elif [[ \\$val -ne 0 ]]",
        "    x=((x-1))",
        "else",
        "    x=\"\\$x\\n\\$line\"",
        "fi",
        "#",
        "pie=good",
        "# => 0, it matches the regex!",
        "[[ \\$pie =~ d ]]; echo \\$?",
        "# => 0, still matches",
        "[[ \\$pie =~ [aeiou]d ]]; echo \\$?",
        "# => 1, no match",
        "[[ \\$pie =~ [aei]d ]]; echo \\$?",
        "# => 1, no match because there's no literal '[aeoiu]d' inside the word \"good\"",
        "[[ \\$pie =~ \"[aeiou]d\" ]]; echo \\$?"
    ],
    "description": "If statement and conditionals"
  }
}

