{
  "@value": {
    "body": [
      "// https://www.baeldung.com/spring-value-annotation",
      "@Value(\"\\${${1:propertyName}:${2:someDefault}}\")",
      "private String ${3:variableName};"
    ],
    "description": "@Value",
    "prefix": "__@value"
  },
  "__append_to_file": {
    "body": [
      "try (BufferedWriter out = new BufferedWriter(new FileWriter(”filename”, true)) {",
      "    out.write(”aString”);",
      "} catch (IOException e) {",
      "    // error processing code",
      "}",
      "$0"
    ],
    "description": "Append text to file",
    "prefix": "__append_to_file"
  },
  "__date_from_string": {
    "body": [
      "SimpleDateFormat format = new SimpleDateFormat( \"dd.MM.yyyy\" );",
      "Date date = format.parse( myString );",
      "$0"
    ],
    "description": "Convert String to date",
    "prefix": "__date_from_string"
  },
  "__date_to_sql_date": {
    "body": [
      "java.util.Date utilDate = new java.util.Date();",
      "java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());",
      "$0"
    ],
    "description": "Convert util.date to sql.date",
    "prefix": "__date_to_sql_date"
  },
  "__method_name": {
    "body": [
      "String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();",
      "$0"
    ],
    "description": "Get name of current meathod",
    "prefix": "__method_name"
  },
  "__string_to_int_and_back": {
    "body": [
      "String a = String.valueOf(1);   //integer to numeric string",
      "int i = Integer.parseInt(a); //numeric string to an int",
      "Code language: Java (java)",
      "$0"
    ],
    "description": "Converting between strings and ints",
    "prefix": "__string_to_int_and_back"
  },
  "annotation": {
    "body": [
      "import static java.lang.annotation.ElementType.ANNOTATION_TYPE;",
      "import static java.lang.annotation.ElementType.FIELD;",
      "import static java.lang.annotation.ElementType.METHOD;",
      "import static java.lang.annotation.ElementType.PARAMETER;",
      "import static java.lang.annotation.ElementType.TYPE;",
      "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
      "",
      "import java.lang.annotation.Documented;",
      "import java.lang.annotation.Repeatable;",
      "import java.lang.annotation.Retention;",
      "import java.lang.annotation.Target;",
      "",
      "@Documented",
      "@Retention(RUNTIME)",
      "@Repeatable(${1:$TM_FILENAME_BASE}List.class)",
      "@Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})",
      "public @interface $1 {",
      "",
      "    $0",
      "",
      "    @Documented",
      "    @Retention(RUNTIME)",
      "    @Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})",
      "    public @interface List {",
      "",
      "        $1[] value();",
      "",
      "    }",
      "",
      "}"
    ],
    "description": "A repeatable annotation",
    "prefix": "__annotation"
  },
  "badge": {
    "body": [
      "    // addIdScreenBadges(profile, results);",
      "    private void addIdScreenBadges(IdScreenIdentityProfiles profile, Results results) {",
      "        switch (profile.getConfidence()) {",
      "            case \"medium\" -> {",
      "                results.addBadge(\"dbs-basic\");",
      "                results.addBadge(\"right-to-work\");",
      "                results.addBadge(\"right-to-rent\");",
      "            }",
      "            case \"high\", \"very-high\" -> {",
      "                results.addBadge(\"dbs-high\");",
      "                results.addBadge(\"right-to-work\");",
      "                results.addBadge(\"right-to-rent\");",
      "            }",
      "        }",
      "    }",
      "$0"
    ],
    "description": "Add a badge",
    "prefix": "__badge"
  },
  "case": {
    "body": [
      "case ${1:value}:",
      "    return $0;"
    ],
    "description": "A case return statement",
    "prefix": "__case"
  },
  "cast": {
    "body": [
      "${1| ,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:varName} = ($1) ${3:obj};",
      "$0"
    ],
    "description": "Cast an object",
    "prefix": "__cast"
  },
  "catch": {
    "body": [
      "catch (${1:Exception} ex) {",
      "    $0",
      "    log.warn(\"Problem: {}\", ex);",
      "    throw ex;",
      "}"
    ],
    "description": "A catch block",
    "prefix": "__catch"
  },
  "class": {
    "body": [
      "public static class ${1:$TM_FILENAME_BASE} {",
      "    $0",
      "}"
    ],
    "description": "A new class",
    "prefix": "__class"
  },
  "const": {
    "body": [
      "private static final${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:CONST_NAME} = ${3:VALUE};",
      "$0"
    ],
    "description": "A private constant",
    "prefix": "__const"
  },
  "dowhile": {
    "body": [
      "do {",
      "    $0",
      "} while ($1);"
    ],
    "description": "A do-while loop",
    "prefix": "__dowhile"
  },
  "else": {
    "body": [
      "else {",
      "    $0",
      "}"
    ],
    "description": "An else block",
    "prefix": "__else"
  },
  "enum": {
    "body": [
      "public enum ${1:$TM_FILENAME_BASE} {",
      "    $0",
      "}"
    ],
    "description": "A new enum class",
    "prefix": "__enum"
  },
  "eq": {
    "body": [
      "Objects.equals(${2:value1}, ${1:value2})$0"
    ],
    "description": "null-safe equals than",
    "prefix": "__eq"
  },
  "eqm": {
    "body": [
      "Objects.equals(${1:this}.${2:fieldOrMethod}, ${3:o}.$2)$0"
    ],
    "description": "null-safe equals than member",
    "prefix": "__eqm"
  },
  "equals": {
    "body": [
      "@Override",
      "public boolean equals(Object obj) {",
      "    if (this == obj) {",
      "        return true;",
      "    }",
      "",
      "    if (obj instanceof ${1:$TM_FILENAME_BASE}) {",
      "        $1 ${2:o} = ($1) obj;",
      "",
      "        return ${3:Objects.equals(this.getId(), $2.getId())}$0;",
      "    }",
      "",
      "    return false;",
      "}",
      ""
    ],
    "description": "An equals method",
    "prefix": "__equals"
  },
  "field": {
    "body": [
      "private final${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:fieldName} = ${3:defaultValue};",
      "$0"
    ],
    "description": "A private final field with value",
    "prefix": "__field"
  },
  "file_append_text": {
    "body": [
      "BufferedWriter out = null;",
      "",
      "try {",
      "    out = new BufferedWriter(new FileWriter(”filename”, true));",
      "    out.write(”aString”);",
      "} catch (IOException e) {",
      "    // error processing code",
      "} finally {",
      "    if (out != null) {",
      "        out.close();",
      "    }",
      "}"
    ],
    "description": "Append text to a file",
    "prefix": "__file_append_text"
  },
  "finally": {
    "body": [
      "finally {",
      "    $0",
      "}"
    ],
    "description": "A finally block",
    "prefix": "__finally"
  },
  "for": {
    "body": [
      "for (int i = (${1:array}.length - 1); i >= 0; i--) {",
      "    $0",
      "}"
    ],
    "description": "A for loop over reverse array",
    "prefix": "__for"
  },
  "foreach": {
    "body": [
      "for (${1| ,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:varName} : ${3:values}) {",
      "    $0",
      "}"
    ],
    "description": "A for loop over iterable",
    "prefix": "__foreach"
  },
  "hashcode": {
    "body": [
      "@Override",
      "public int hashCode() {",
      "    return Objects.hashCode(${1:getId()});",
      "}",
      "$0"
    ],
    "description": "A hashcode method",
    "prefix": "__hashcode"
  },
  "if": {
    "body": [
      "((${1:varName} != null) ? $2 : $3)$0"
    ],
    "description": "An if not null ternary statement",
    "prefix": "__if"
  },
  "init_map": {
    "body": [
      "public class VatTotalAccumulator {",
      "    private static final float ZERO_VAT = 0.0f;",
      "    private static final float STANDARD_VAT = 0.20f;",
      "    private static final float LOW_VAT = 0.05f;",
      "    private static Map<VatCategory, Percentage> vatRates = new EnumMap<VatCategory, Percentage>(VatCategory.class);",
      "",
      "    static {",
      "        vatRates.put(VatCategory.Zero, new Percentage(ZERO_VAT));",
      "        vatRates.put(VatCategory.Exempt, new Percentage(ZERO_VAT));",
      "        vatRates.put(VatCategory.Std, new Percentage(STANDARD_VAT));",
      "        vatRates.put(VatCategory.Low, new Percentage(LOW_VAT));",
      "    }",
      ""
    ],
    "description": "Initialise a map",
    "prefix": "__init_map"
  },
  "int_to_string": {
    "body": [
      "String str = String.valueOf(2);"
    ],
    "description": "Convert integer to a string",
    "prefix": "__int_to_string"
  },
  "interface": {
    "body": [
      "@FunctionalInterface",
      "public interface ${1:$TM_FILENAME_BASE} {",
      "    $0",
      "}"
    ],
    "description": "A functional interface",
    "prefix": "__interface"
  },
  "lambda0": {
    "body": [
      "() -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block without arguments",
    "prefix": "__lambda0"
  },
  "lambda0s": {
    "body": [
      "() -> $0"
    ],
    "description": "A simple lambda without arguments",
    "prefix": "__lambda0s"
  },
  "lambda1": {
    "body": [
      "${1:a} -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 1 argument",
    "prefix": "__lambda1"
  },
  "lambda1s": {
    "body": [
      "${1:a} -> $0"
    ],
    "description": "A simple lambda with 1 argument",
    "prefix": "__lambda1s"
  },
  "lambda2": {
    "body": [
      "(${1:a}, ${2:b}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 2 arguments",
    "prefix": "__lambda2"
  },
  "lambda2s": {
    "body": [
      "(${1:a}, ${2:b}) -> $0"
    ],
    "description": "A simple lambda with 2 arguments",
    "prefix": "__lambda2s"
  },
  "lambda3": {
    "body": [
      "(${1:a}, ${2:b}, ${3:c}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 3 arguments",
    "prefix": "__lambda3"
  },
  "lambda3s": {
    "body": [
      "(${1:a}, ${2:b}, ${3:c}) -> $0"
    ],
    "description": "A simple lambda with 3 arguments",
    "prefix": "__lambda3s"
  },
  "lambda4": {
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 4 arguments",
    "prefix": "__lambda4"
  },
  "lambda4s": {
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}) -> $0"
    ],
    "description": "A simple lambda with 4 arguments",
    "prefix": "__lambda4s"
  },
  "lambda5": {
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 5 arguments",
    "prefix": "__lambda5"
  },
  "lambda5s": {
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e}) -> $0"
    ],
    "description": "A simple lambda with 5 arguments",
    "prefix": "__lambda5s"
  },
  "log": {
    "body": [
      " private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      " $0"
    ],
    "description": "New static log var for a class",
    "prefix": "__log"
  },
  "logi": {
    "body": [
      "import org.slf4j.Logger;",
      "import org.slf4j.LoggerFactory;",
      "",
      " private static final Logger log = LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      " $0"
    ],
    "description": "New static log var (with imports)",
    "prefix": "__logi"
  },
  "main": {
    "body": [
      "public static void main(String[] args) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A main method",
    "prefix": "__main"
  },
  "method": {
    "body": [
      "public static${2| , void, String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:methodName}($4) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A public static method",
    "prefix": "__method"
  },
  "new": {
    "body": [
      "new ${1:Object}($0)"
    ],
    "description": "A new instance",
    "prefix": "__new"
  },
  "new_java_class": {
    "body": [
      "/* Copyright ${VIM:\\$USER_FULL_NAME$} - $CURRENT_YEAR */",
      "package ${TM_DIRECTORY/(.*)/${1:/upcase}/};",
      "",
      "import org.slf4j.Logger;",
      "import org.slf4j.LoggerFactory;",
      "",
      "/**",
      " * Main class for $1",
      " *",
      " * @author ${VIM:\\$USER_FULL_NAME$} [${VIM:\\$USER_EMAIL$}]",
      " * @since $CURRENT_DATE $CURRENT_MONTH_NAME $CURRENT_YEAR",
      " */",
      "public final class $TM_FILENAME_BASE {",
      " /** Logger! */",
      " private static final Logger log = LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      "",
      " /**",
      "  * Main.",
      "  *",
      "  * @param args Command line arguments.",
      "  */",
      " public static void main(final String[] args) throws CmdLineException {",
      "  $0",
      " }",
      "}"
    ],
    "description": "New Java class",
    "prefix": "__new_java_class"
  },
  "npe": {
    "body": [
      "if (user != null && user.getUserName() != null) {",
      "    System.out.println(\"User Name: \" + user.getUserName().toLowerCase());",
      "}"
    ],
    "description": "Null Pointer Exception block",
    "prefix": "__npe"
  },
  "param": {
    "body": [
      "${1|Void,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:paramName}$0"
    ],
    "description": "A parameter",
    "prefix": "__param"
  },
  "print": {
    "body": [
      "System.out.print(\"$1\");$0"
    ],
    "description": "Prints a String",
    "prefix": "__print"
  },
  "printf": {
    "body": [
      "System.out.printf(\"${1:%s}\", ${2:value});$0"
    ],
    "description": "Prints a formatted String",
    "prefix": "__printf"
  },
  "printfn": {
    "body": [
      "System.out.printf(\"${1:%s}\\n\", ${2:value});$0"
    ],
    "description": "Prints a formatted String and then terminate the line",
    "prefix": "__printfn"
  },
  "printfv": {
    "body": [
      "System.out.printf(\"${1:varName} = ${2:%s\\n}\", $1);$0"
    ],
    "description": "Prints the formatted variable value",
    "prefix": "__printfv"
  },
  "println": {
    "body": [
      "System.out.println(\"$1\");$0"
    ],
    "description": "Prints a String and then terminate the line",
    "prefix": "__println"
  },
  "printv": {
    "body": [
      "System.out.println(\"${1:varName} = \" + $1);$0"
    ],
    "description": "Prints the variable value",
    "prefix": "__printv"
  },
  "return": {
    "body": [
      "return this;"
    ],
    "description": "A return this",
    "prefix": "__return"
  },
  "string_to_int": {
    "body": [
      "int i = Integer.parseInt(str);"
    ],
    "description": "Convert string to an integer",
    "prefix": "__string_to_int"
  },
  "stringb": {
    "body": [
      "StringBuilder ${1:builder} = new StringBuilder()",
      "    $0",
      "    .toString();"
    ],
    "description": "A local StringBuilder variable",
    "prefix": "__stringb"
  },
  "stringvariable": {
    "body": [
      "String ${1:varName} = new StringBuilder()",
      "    $0",
      "    .toString();"
    ],
    "description": "A local string variable from StringBuilder",
    "prefix": "__stringvariable"
  },
  "switch": {
    "body": [
      "switch (${1:varName}) {",
      "    case ${2:value}:",
      "        $0",
      "        break;",
      "    default:",
      "        break;",
      "}"
    ],
    "description": "A switch statement",
    "prefix": "__switch"
  },
  "throw": {
    "body": [
      "throw new IllegalStateException($0);"
    ],
    "description": "Throw a new IllegalStateException",
    "prefix": "__throw"
  },
  "try": {
    "body": [
      "try {",
      "    $0",
      "}"
    ],
    "description": "A try block",
    "prefix": "__try"
  },
  "trycatch": {
    "body": [
      "try {",
      "    $TM_SELECTED_TEXT",
      "} catch (${1:Exception} ex) {",
      "    $0",
      "}"
    ],
    "description": "A try catch block around the selected text",
    "prefix": "__trycatch"
  },
  "trycatchfinally": {
    "body": [
      "try {",
      "    $TM_SELECTED_TEXT",
      "} catch (${1:Exception} ex) {",
      "    $0",
      "} finally {",
      "    ",
      "}"
    ],
    "description": "A try catch finally block around the selected text",
    "prefix": "__trycatchfinally"
  },
  "tryresource": {
    "body": [
      "try ($1) {",
      "    $0",
      "}"
    ],
    "description": "A try with resources block",
    "prefix": "__tryresource"
  },
  "type": {
    "body": [
      "${1|Void,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|}"
    ],
    "description": "A type",
    "prefix": "__type"
  }
}
