{
  "#regionend": {
    "body": [
      "//#endregion"
    ],
    "description": "#endregion",
    "prefix": "regionend"
  },
  "#regionstart": {
    "body": [
      "//#region $0"
    ],
    "description": "#region",
    "prefix": "regionstart"
  },
  "classdefinition": {
    "body": [
      "class ${1:name} {",
      " constructor(${2:parameters}) {",
      "  $0",
      " }",
      "}"
    ],
    "description": "class",
    "prefix": "classdefinition"
  },
  "constructor": {
    "body": [
      "/**",
      " *",
      " */",
      "constructor() {",
      " super();",
      " $0",
      "}"
    ],
    "description": "ctor",
    "prefix": "constructor"
  },
  "defineafullproperty": {
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string} {",
      " return this._${1:value};",
      "}",
      "public set ${1:value}(v : ${2:string}) {",
      " this._${1:value} = v;",
      "}",
      ""
    ],
    "description": "prop",
    "prefix": "defineafullproperty"
  },
  "do-whilestatement": {
    "body": [
      "do {",
      " $0",
      "} while (${1:condition});"
    ],
    "description": "dowhile",
    "prefix": "do-whilestatement"
  },
  "for-eachloopusing": {
    "body": [
      "${1:array}.forEach(${2:element} => {",
      " $0",
      "});"
    ],
    "description": "foreach",
    "prefix": "for-eachloopusing=>"
  },
  "for-inloop": {
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      " if (${2:object}.hasOwnProperty(${1:key})) {",
      "  const ${3:element} = ${2:object}[${1:key}];",
      "  $0",
      " }",
      "}"
    ],
    "description": "forin",
    "prefix": "for-inloop"
  },
  "for-ofloop": {
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
      " $0",
      "}"
    ],
    "description": "forof",
    "prefix": "for-ofloop"
  },
  "forloop": {
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      " const ${3:element} = ${2:array}[${1:index}];",
      " $0",
      "}"
    ],
    "description": "for",
    "prefix": "forloop"
  },
  "functionstatement": {
    "body": [
      "function ${1:name}(${2:params}:${3:type}) {",
      " $0",
      "}"
    ],
    "description": "function",
    "prefix": "functionstatement"
  },
  "if-elsestatement": {
    "body": [
      "if (${1:condition}) {",
      " $0",
      "} else {",
      " ",
      "}"
    ],
    "description": "ifelse",
    "prefix": "if-elsestatement"
  },
  "ifstatement": {
    "body": [
      "if (${1:condition}) {",
      " $0",
      "}"
    ],
    "description": "if",
    "prefix": "ifstatement"
  },
  "importexternalmodulestatement": {
    "body": [
      "import { $0 } from \"${1:module}\";"
    ],
    "description": "import statement",
    "prefix": "importexternalmodule."
  },
  "logerrortoconsole": {
    "body": [
      "console.error($1);",
      "$0"
    ],
    "description": "error",
    "prefix": "logerrortoconsole"
  },
  "logtotheconsole": {
    "body": [
      "console.log($1);",
      "$0"
    ],
    "description": "log",
    "prefix": "logtotheconsole"
  },
  "logwarningtoconsole": {
    "body": [
      "console.warn($1);",
      "$0"
    ],
    "description": "warn",
    "prefix": "logwarningtoconsole"
  },
  "newstatement": {
    "body": [
      "const ${1:name} = new ${2:type}(${3:arguments});$0"
    ],
    "description": "new",
    "prefix": "newstatement"
  },
  "privatemethoddefinitionmethod": {
    "body": [
      "private ${1:name}() {",
      " $0",
      "}"
    ],
    "description": "private method",
    "prefix": "privatemethoddefinition"
  },
  "propertygetter": {
    "body": [
      "",
      "public get ${1:value}() : ${2:string} {",
      " ${3:return $0}",
      "}",
      ""
    ],
    "description": "get",
    "prefix": "propertygetter"
  },
  "propertysetter": {
    "body": [
      "",
      "public set ${1:value}(v : ${2:string}) {",
      " this.$3 = v;",
      "}",
      ""
    ],
    "description": "set",
    "prefix": "propertysetter"
  },
  "publicmethoddefinitionmethod": {
    "body": [
      "/**",
      " * ${1:name}",
      " */",
      "public ${1:name}() {",
      " $0",
      "}"
    ],
    "description": "public method",
    "prefix": "publicmethoddefinition"
  },
  "settimeoutfunction": {
    "body": [
      "setTimeout(() => {",
      " $0",
      "}, ${1:timeout});"
    ],
    "description": "settimeout",
    "prefix": "settimeoutfunction"
  },
  "switchstatement": {
    "body": [
      "switch (${1:key}) {",
      " case ${2:value}:",
      "  $0",
      "  break;",
      "",
      " default:",
      "  break;",
      "}"
    ],
    "description": "switch",
    "prefix": "switchstatement"
  },
  "throwexception": {
    "body": [
      "throw \"$1\";",
      "$0"
    ],
    "description": "throw",
    "prefix": "throwexception"
  },
  "triple-slashreference": {
    "body": [
      "/// <reference path=\"$1\" />",
      "$0"
    ],
    "description": "ref",
    "prefix": "triple-slashreference"
  },
  "try-catchstatement": {
    "body": [
      "try {",
      " $0",
      "} catch (${1:error}) {",
      " ",
      "}"
    ],
    "description": "trycatch",
    "prefix": "try-catchstatement"
  },
  "whilestatement": {
    "body": [
      "while (${1:condition}) {",
      " $0",
      "}"
    ],
    "description": "while",
    "prefix": "whilestatement"
  }
}
