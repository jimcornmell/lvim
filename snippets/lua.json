{
  "describe": {
    "prefix": "describe",
    "body": [
      "describe('${1:Title}', function()",
      "\t${2}",
      "end)"
    ],
    "description": ""
  },
  "doc": {
    "prefix": "doc",
    "body": [
      "-----------------------------------------------------------------------------//",
      "-- ${0:document}",
      "-----------------------------------------------------------------------------//"
    ],
    "description": ""
  },
  "apifun": {
    "prefix": "api.",
    "body": [
      "vim.api.nvim_${1:buf}_${2:get}_${3:name}"
    ],
    "description": ""
  },
  "fn": {
    "prefix": "lfn",
    "body": [
      "local fn = vim.fn"
    ],
    "description": ""
  },
  "api": {
    "prefix": "lapi",
    "body": [
      "local api = vim.api"
    ],
    "description": ""
  },
  "fmt": {
    "prefix": "lfmt",
    "body": [
      "local fmt = string.format"
    ],
    "description": ""
  },
  "inspect": {
    "prefix": "vi",
    "body": [
      "print(\"${1}: \" .. vim.inspect(${1}))"
    ],
    "description": ""
  },
  "for": {
    "body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
    "description": "for i=1,10",
    "prefix": "for",
    "scope": "source.lua"
  },
  "fori": {
    "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
    "description": "for i,v in ipairs()",
    "prefix": "fori",
    "scope": "source.lua"
  },
  "forp": {
    "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
    "description": "for k,v in pairs()",
    "prefix": "forp",
    "scope": "source.lua"
  },
  "fun": {
    "body": "function ${1:function_name}(${2:...})\n\t${0:-- body}\nend",
    "description": "function",
    "prefix": "fun",
    "scope": "source.lua"
  },
  "function": {
    "body": "function ${1:function_name}(${2:...})\n\t${0:-- body}\nend",
    "description": "function",
    "prefix": "function",
    "scope": "source.lua"
  },
  "getmetatable": {
    "body": "getmetatable(${1:object})",
    "description": "getmetatable (object)",
    "prefix": "getmetatable",
    "scope": "source.lua"
  },
  "if": {
    "body": "if ${1:condition} then\n\t${0:-- body}\nend",
    "description": "if",
    "prefix": "if",
    "scope": "source.lua"
  },
  "ifel": {
    "body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
    "description": "ifel",
    "prefix": "ifel",
    "scope": "source.lua"
  },
  "ipairs": {
    "body": "ipairs(${0:...})",
    "description": "ipairs (t)",
    "prefix": "ipairs",
    "scope": "source.lua"
  },
  "load": {
    "body": "load(${0:...})",
    "description": "load (func [, chunkname])",
    "prefix": "load",
    "scope": "source.lua"
  },
  "loadfile": {
    "body": "loadfile(${0:...})",
    "description": "loadfile ([filename])",
    "prefix": "loadfile",
    "scope": "source.lua"
  },
  "loadstring": {
    "body": "loadstring(${0:...})",
    "description": "loadstring (string [, chunkname])",
    "prefix": "loadstring",
    "scope": "source.lua"
  },
  "local": {
    "body": "local ${1:x} = ${0:1}",
    "description": "local x = 1",
    "prefix": "local",
    "scope": "source.lua"
  },
  "pairs": {
    "body": "pairs(${0:...})",
    "description": "pairs (t)",
    "prefix": "pairs",
    "scope": "source.lua"
  },
  "pcall": {
    "body": "pcall(${0:...})",
    "description": "pcall (f, arg1, ...)",
    "prefix": "pcall",
    "scope": "source.lua"
  },
  "print": {
    "body": "print(${1:...})",
    "description": "print(...)",
    "prefix": "print",
    "scope": "source.lua"
  },
  "rawequal": {
    "body": "rawequal(${0:...})",
    "description": "rawequal (v1, v2)",
    "prefix": "rawequal",
    "scope": "source.lua"
  },
  "rawget": {
    "body": "rawget(${0:...})",
    "description": "rawget (table, index)",
    "prefix": "rawget",
    "scope": "source.lua"
  },
  "rawlen": {
    "body": "rawlen(${0:...})",
    "description": "rawlen (v)",
    "prefix": "rawlen",
    "scope": "source.lua"
  },
  "rawset": {
    "body": "rawset(${0:...})",
    "description": "rawset (table, index, value)",
    "prefix": "rawset",
    "scope": "source.lua"
  },
  "req": {
    "body": "require(\"${1:module}\")",
    "description": "require()",
    "prefix": "req",
    "scope": "source.lua"
  },
  "require": {
    "body": "require(\"${1:module}\")",
    "description": "require()",
    "prefix": "require",
    "scope": "source.lua"
  },
  "ret": {
    "body": "return ${1:...}",
    "description": "return ...",
    "prefix": "ret",
    "scope": "source.lua"
  },
  "select": {
    "body": "select(${1:index}, ${2:...})",
    "description": "select (index, ···)",
    "prefix": "select",
    "scope": "source.lua"
  },
  "setfenv": {
    "body": "setfenv(${0:...})",
    "description": "setfenv (f, table)",
    "prefix": "setfenv",
    "scope": "source.lua"
  },
  "setmetatable": {
    "body": "setmetatable(${1:table}, ${2:metatable})",
    "description": "setmetatable (table, metatable)",
    "prefix": "setmetatable",
    "scope": "source.lua"
  },
  "string.byte": {
    "body": "string.byte(${1:s}${2:[, i]}${3:[, j]})",
    "description": "string.byte",
    "prefix": "string.byte",
    "scope": "source.lua"
  },
  "string.char": {
    "body": "string.char(${1:...})",
    "description": "string.char",
    "prefix": "string.char",
    "scope": "source.lua"
  },
  "string.dump": {
    "body": "string.dump(${0:...})",
    "description": "string.dump (function)",
    "prefix": "string.dump",
    "scope": "source.lua"
  },
  "string.find": {
    "body": "string.find(${1:s},${2:pattern}${3:[, init]}${4:[, plain]})",
    "description": "string.find",
    "prefix": "string.find",
    "scope": "source.lua"
  },
  "string.format": {
    "body": "string.format(\"${1:formatstring}\",${2:...})",
    "description": "string.format",
    "prefix": "string.format",
    "scope": "source.lua"
  },
  "string.gmatch": {
    "body": "string.gmatch(${1:s},${2:pattern})",
    "description": "string.gmatch",
    "prefix": "string.gmatch",
    "scope": "source.lua"
  },
  "string.gsub": {
    "body": "string.gsub(${1:s},${2:pattern},${3:repl}${4:[, n]})",
    "description": "string.gsub",
    "prefix": "string.gsub",
    "scope": "source.lua"
  },
  "string.len": {
    "body": "string.len(${1:s})",
    "description": "string.len",
    "prefix": "string.len",
    "scope": "source.lua"
  },
  "string.lower": {
    "body": "string.lower(${1:s})",
    "description": "string.lower",
    "prefix": "string.lower",
    "scope": "source.lua"
  },
  "string.match": {
    "body": "string.match(${1:s},${2:pattern}${3:[, init]})",
    "description": "string.match",
    "prefix": "string.match",
    "scope": "source.lua"
  },
  "string.pack": {
    "body": "string.pack(${0:...})",
    "description": "string.pack (fmt, v1, v2, ...)",
    "prefix": "string.pack",
    "scope": "source.lua"
  },
  "string.packsize": {
    "body": "string.packsize(${0:...})",
    "description": "string.packsize (fmt)",
    "prefix": "string.packsize",
    "scope": "source.lua"
  },
  "string.rep": {
    "body": "string.rep(${1:s}, ${2:n}${3:[, rep]})",
    "description": "string.rep",
    "prefix": "string.rep",
    "scope": "source.lua"
  },
  "string.reverse": {
    "body": "string.reverse(${1:s})",
    "description": "string.reverse",
    "prefix": "string.reverse",
    "scope": "source.lua"
  },
  "string.sub": {
    "body": "string.sub(${1:s}, ${2:i}${3:[, j]})",
    "description": "string.sub",
    "prefix": "string.sub",
    "scope": "source.lua"
  },
  "string.unpack": {
    "body": "string.unpack(${0:...})",
    "description": "string.unpack (fmt, s [, pos])",
    "prefix": "string.unpack",
    "scope": "source.lua"
  },
  "string.upper": {
    "body": "string.upper(${1:s})",
    "description": "string.upper",
    "prefix": "string.upper",
    "scope": "source.lua"
  },
  "table.concat": {
    "body": "table.concat(${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index})",
    "description": "table.concat",
    "prefix": "table.concat",
    "scope": "source.lua"
  },
  "table.insert": {
    "body": "table.insert(${1:list},${2: [pos,]}${3: value})",
    "description": "table.insert",
    "prefix": "table.insert",
    "scope": "source.lua"
  },
  "table.maxn": {
    "body": "table.maxn(${0:...})",
    "description": "table.maxn (table)",
    "prefix": "table.maxn",
    "scope": "source.lua"
  },
  "table.move": {
    "body": "table.move(${0:...})",
    "description": "table.move (a1, f, e, t [,a2])",
    "prefix": "table.move",
    "scope": "source.lua"
  },
  "table.pack": {
    "body": "table.pack(${0:...})",
    "description": "table.pack (...)",
    "prefix": "table.pack",
    "scope": "source.lua"
  },
  "table.remove": {
    "body": "table.remove(${1:list},${2: [pos,]})",
    "description": "table.remove",
    "prefix": "table.remove",
    "scope": "source.lua"
  },
  "table.sort": {
    "body": "table.sort(${1:tablename}${2:, sortfunction})",
    "description": "table.sort",
    "prefix": "table.sort",
    "scope": "source.lua"
  },
  "table.unpack": {
    "body": "table.unpack(${0:...})",
    "description": "table.unpack (list [, i [, j]])",
    "prefix": "table.unpack",
    "scope": "source.lua"
  },
  "tonumber": {
    "body": "tonumber(${1:e}${2:[, base]})",
    "description": "tonumber (e [, base])",
    "prefix": "tonumber",
    "scope": "source.lua"
  },
  "tostring": {
    "body": "tostring(${1:v})",
    "description": "tostring (v)",
    "prefix": "tostring",
    "scope": "source.lua"
  },
  "type": {
    "body": "type(${1:v})",
    "description": "type (v)",
    "prefix": "type",
    "scope": "source.lua"
  },
  "unpack": {
    "body": "unpack(${0:...})",
    "description": "unpack (list [, i [, j]])",
    "prefix": "unpack",
    "scope": "source.lua"
  },
  "param": {
    "prefix": "param",
    "body": "--- @param ${1:name} ${2:type}",
    "description": "Add annotation"
  },
  "lua_log_object": {
    "prefix": "lua_log_object",
    "body": [
      "local function tprint (tbl, indent)",
      "  if not indent then indent = 0 end",
      "  local toprint = string.rep(\" \", indent) .. \"{\\r\\n\"",
      "  indent = indent + 2",
      "  for k, v in pairs(tbl) do",
      "    toprint = toprint .. string.rep(\" \", indent)",
      "    if (type(k) == \"number\") then",
      "      toprint = toprint .. \"[\" .. k .. \"] = \"",
      "    elseif (type(k) == \"string\") then",
      "      toprint = toprint  .. k ..  \"= \"",
      "    end",
      "    if (type(v) == \"number\") then",
      "      toprint = toprint .. v .. \",\\r\\n\"",
      "    elseif (type(v) == \"string\") then",
      "      toprint = toprint .. \"\\\"\" .. v .. \"\\\",\\r\\n\"",
      "    elseif (type(v) == \"table\") then",
      "      toprint = toprint .. tprint(v, indent + 2) .. \",\\r\\n\"",
      "    else",
      "      toprint = toprint .. \"\\\"\" .. tostring(v) .. \"\\\",\\r\\n\"",
      "    end",
      "  end",
      "  toprint = toprint .. string.rep(\" \", indent-2) .. \"}\"",
      "  return toprint",
      "end",
      "",
      "local fw = io.open(\"~/l.log\", \"w\")",
      "fw:write(\"--------------------\")",
      "fw:write(tprint(lvim.builtin.lualine))",
      "fw:write(tprint(lvim.builtin))",
      "fw:write(tprint(lvim))",
      "fw:close()"
    ],
    "description": "Chunk of code to log object to text file"
  }
}
