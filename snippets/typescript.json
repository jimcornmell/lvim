{
  "ctor": {
    "prefix": "Constructor",
    "body": [
      "/**",
      " *",
      " */",
      "constructor() {",
      " super();",
      " $0",
      "}"
    ],
    "description": "ctor"
  },
  "class": {
    "prefix": "Class Definition",
    "body": [
      "class ${1:name} {",
      " constructor(${2:parameters}) {",
      "  $0",
      " }",
      "}"
    ],
    "description": "class"
  },
  "public method": {
    "prefix": "Public Method Definition",
    "body": [
      "/**",
      " * ${1:name}",
      " */",
      "public ${1:name}() {",
      " $0",
      "}"
    ],
    "description": "public method"
  },
  "private method": {
    "prefix": "Private Method Definition",
    "body": [
      "private ${1:name}() {",
      " $0",
      "}"
    ],
    "description": "private method"
  },
  "import statement": {
    "prefix": "Import external module.",
    "body": [
      "import { $0 } from \"${1:module}\";"
    ],
    "description": "import statement"
  },
  "get": {
    "prefix": "Property getter",
    "body": [
      "",
      "public get ${1:value}() : ${2:string} {",
      " ${3:return $0}",
      "}",
      ""
    ],
    "description": "get"
  },
  "log": {
    "prefix": "Log to the console",
    "body": [
      "console.log($1);",
      "$0"
    ],
    "description": "log"
  },
  "warn": {
    "prefix": "Log warning to console",
    "body": [
      "console.warn($1);",
      "$0"
    ],
    "description": "warn"
  },
  "error": {
    "prefix": "Log error to console",
    "body": [
      "console.error($1);",
      "$0"
    ],
    "description": "error"
  },
  "prop": {
    "prefix": "Define a full property",
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string} {",
      " return this._${1:value};",
      "}",
      "public set ${1:value}(v : ${2:string}) {",
      " this._${1:value} = v;",
      "}",
      ""
    ],
    "description": "prop"
  },
  "ref": {
    "prefix": "Triple-slash reference",
    "body": [
      "/// <reference path=\"$1\" />",
      "$0"
    ],
    "description": "ref"
  },
  "set": {
    "prefix": "Property setter",
    "body": [
      "",
      "public set ${1:value}(v : ${2:string}) {",
      " this.$3 = v;",
      "}",
      ""
    ],
    "description": "set"
  },
  "throw": {
    "prefix": "Throw Exception",
    "body": [
      "throw \"$1\";",
      "$0"
    ],
    "description": "throw"
  },
  "for": {
    "prefix": "For Loop",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      " const ${3:element} = ${2:array}[${1:index}];",
      " $0",
      "}"
    ],
    "description": "for"
  },
  "foreach": {
    "prefix": "For-Each Loop using =>",
    "body": [
      "${1:array}.forEach(${2:element} => {",
      " $0",
      "});"
    ],
    "description": "foreach"
  },
  "forin": {
    "prefix": "For-In Loop",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      " if (${2:object}.hasOwnProperty(${1:key})) {",
      "  const ${3:element} = ${2:object}[${1:key}];",
      "  $0",
      " }",
      "}"
    ],
    "description": "forin"
  },
  "forof": {
    "prefix": "For-Of Loop",
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
      " $0",
      "}"
    ],
    "description": "forof"
  },
  "function": {
    "prefix": "Function Statement",
    "body": [
      "function ${1:name}(${2:params}:${3:type}) {",
      " $0",
      "}"
    ],
    "description": "function"
  },
  "if": {
    "prefix": "If Statement",
    "body": [
      "if (${1:condition}) {",
      " $0",
      "}"
    ],
    "description": "if"
  },
  "ifelse": {
    "prefix": "If-Else Statement",
    "body": [
      "if (${1:condition}) {",
      " $0",
      "} else {",
      " ",
      "}"
    ],
    "description": "ifelse"
  },
  "new": {
    "prefix": "New Statement",
    "body": [
      "const ${1:name} = new ${2:type}(${3:arguments});$0"
    ],
    "description": "new"
  },
  "switch": {
    "prefix": "Switch Statement",
    "body": [
      "switch (${1:key}) {",
      " case ${2:value}:",
      "  $0",
      "  break;",
      "",
      " default:",
      "  break;",
      "}"
    ],
    "description": "switch"
  },
  "while": {
    "prefix": "While Statement",
    "body": [
      "while (${1:condition}) {",
      " $0",
      "}"
    ],
    "description": "while"
  },
  "dowhile": {
    "prefix": "Do-While Statement",
    "body": [
      "do {",
      " $0",
      "} while (${1:condition});"
    ],
    "description": "dowhile"
  },
  "trycatch": {
    "prefix": "Try-Catch Statement",
    "body": [
      "try {",
      " $0",
      "} catch (${1:error}) {",
      " ",
      "}"
    ],
    "description": "trycatch"
  },
  "settimeout": {
    "prefix": "Set Timeout Function",
    "body": [
      "setTimeout(() => {",
      " $0",
      "}, ${1:timeout});"
    ],
    "description": "settimeout"
  },
  "#region": {
    "prefix": "Region Start",
    "body": [
      "//#region $0"
    ],
    "description": "#region"
  },
  "#endregion": {
    "prefix": "Region End",
    "body": [
      "//#endregion"
    ],
    "description": "#endregion"
  }
}
