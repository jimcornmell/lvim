{
  "new_java_class": {
    "prefix": "new_java_class",
    "body": [
      "/* Copyright ${VIM:\\$USER_FULL_NAME$} - $CURRENT_YEAR */",
      "package ${TM_DIRECTORY/(.*)/${1:/upcase}/};",
      "",
      "import org.slf4j.Logger;",
      "import org.slf4j.LoggerFactory;",
      "",
      "/**",
      " * Main class for $1",
      " *",
      " * @author ${VIM:\\$USER_FULL_NAME$} [${VIM:\\$USER_EMAIL$}]",
      " * @since $CURRENT_DATE $CURRENT_MONTH_NAME $CURRENT_YEAR",
      " */",
      "public final class $TM_FILENAME_BASE {",
      " /** Logger! */",
      " private static final Logger log = LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      "",
      " /**",
      "  * Main.",
      "  *",
      "  * @param args Command line arguments.",
      "  */",
      " public static void main(final String[] args) throws CmdLineException {",
      "  $0",
      " }",
      "}"
    ],
    "description": "new_java_class"
  },
  "log": {
    "prefix": "log",
    "body": [
      " private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      " $0"
    ],
    "description": "log"
  },
  "Create a logger with imports": {
    "prefix": "logi",
    "body": [
      "import org.slf4j.Logger;",
      "import org.slf4j.LoggerFactory;",
      "",
      " private static final Logger log = LoggerFactory.getLogger($TM_FILENAME_BASE.class);",
      " $0"
    ]
  },
  "Convert int to string": {
    "prefix": "int_to_string",
    "body": [
      "String str = String.valueOf(2);"
    ]
  },
  "Convert string to int": {
    "prefix": "string_to_int",
    "body": [
      "int i = Integer.parseInt(str);"
    ]
  },
  "Append text to a file": {
    "prefix": "file_append_text",
    "body": [
      "BufferedWriter out = null;",
      "try {",
      " out = new BufferedWriter(new FileWriter(”filename”, true));",
      " out.write(”aString”);",
      "} catch (IOException e) {",
      " // error processing code",
      "} finally {",
      " if (out != null) {",
      "  out.close();",
      " }",
      "}"
    ]
  },
  "@Value": {
    "prefix": "@Value",
    "body": [
      "// https://www.baeldung.com/spring-value-annotation",
      "@Value(\"\\${${1:propertyName}:${2:someDefault}}\")",
      "private String ${3:variableName};"
    ],
    "description": "@Value"
  },
  "init_map": {
    "prefix": "init_map",
    "body": [
      "public class VatTotalAccumulator {",
      "    private static final float ZERO_VAT = 0.0f;",
      "    private static final float STANDARD_VAT = 0.20f;",
      "    private static final float LOW_VAT = 0.05f;",
      "    private static Map<VatCategory, Percentage> vatRates = new EnumMap<VatCategory, Percentage>(VatCategory.class);",
      "",
      "    static {",
      "        vatRates.put(VatCategory.Zero, new Percentage(ZERO_VAT));",
      "        vatRates.put(VatCategory.Exempt, new Percentage(ZERO_VAT));",
      "        vatRates.put(VatCategory.Std, new Percentage(STANDARD_VAT));",
      "        vatRates.put(VatCategory.Low, new Percentage(LOW_VAT));",
      "    }",
      ""
    ],
    "description": "init_map"
  },
  "class": {
    "prefix": "class",
    "body": [
      "public class ${1:$TM_FILENAME_BASE} {",
      "",
      "    $0",
      "",
      "}"
    ]
  },
  "Static class": {
    "prefix": "class",
    "body": [
      "public static class ${1:$TM_FILENAME_BASE} {",
      "",
      "    $0",
      "",
      "}"
    ]
  },
  "Interface": {
    "prefix": "interface",
    "body": [
      "public interface ${1:$TM_FILENAME_BASE} {",
      "",
      "    $0",
      "",
      "}"
    ],
    "description": "An interface"
  },
  "Functional interface": {
    "prefix": "interface",
    "body": [
      "@FunctionalInterface",
      "public interface ${1:$TM_FILENAME_BASE} {",
      "",
      "    $0",
      "",
      "}"
    ],
    "description": "An interface"
  },
  "Enum": {
    "prefix": "enum",
    "body": [
      "public enum ${1:$TM_FILENAME_BASE} {",
      "",
      "    $0",
      "",
      "}"
    ],
    "description": "An enum"
  },
  "Annotation": {
    "prefix": "annotation",
    "body": [
      "import static java.lang.annotation.ElementType.ANNOTATION_TYPE;",
      "import static java.lang.annotation.ElementType.FIELD;",
      "import static java.lang.annotation.ElementType.METHOD;",
      "import static java.lang.annotation.ElementType.PARAMETER;",
      "import static java.lang.annotation.ElementType.TYPE;",
      "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
      "",
      "import java.lang.annotation.Documented;",
      "import java.lang.annotation.Repeatable;",
      "import java.lang.annotation.Retention;",
      "import java.lang.annotation.Target;",
      "",
      "@Documented",
      "@Retention(RUNTIME)",
      "@Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})",
      "public @interface ${1:$TM_FILENAME_BASE} {",
      "",
      "    $0",
      "",
      "}"
    ],
    "description": "An annotation"
  },
  "Repetable annotation": {
    "prefix": "annotation",
    "body": [
      "import static java.lang.annotation.ElementType.ANNOTATION_TYPE;",
      "import static java.lang.annotation.ElementType.FIELD;",
      "import static java.lang.annotation.ElementType.METHOD;",
      "import static java.lang.annotation.ElementType.PARAMETER;",
      "import static java.lang.annotation.ElementType.TYPE;",
      "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
      "",
      "import java.lang.annotation.Documented;",
      "import java.lang.annotation.Repeatable;",
      "import java.lang.annotation.Retention;",
      "import java.lang.annotation.Target;",
      "",
      "@Documented",
      "@Retention(RUNTIME)",
      "@Repeatable(${1:$TM_FILENAME_BASE}List.class)",
      "@Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})",
      "public @interface $1 {",
      "",
      "    $0",
      "",
      "    @Documented",
      "    @Retention(RUNTIME)",
      "    @Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})",
      "    public @interface List {",
      "",
      "        $1[] value();",
      "",
      "    }",
      "",
      "}"
    ],
    "description": "A repetable annotation"
  },
  "Type": {
    "prefix": "type",
    "body": [
      "${1|Void,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|}"
    ],
    "description": "A type"
  },
  "If statement": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "    $0",
      "}"
    ],
    "description": "An if statement"
  },
  "If null statement": {
    "prefix": "if",
    "body": [
      "if (${1:varName} == null) {",
      "    $0",
      "}"
    ],
    "description": "An if null statement"
  },
  "If not null statement": {
    "prefix": "if",
    "body": [
      "if (${1:varName} != null) {",
      "    $0",
      "}"
    ],
    "description": "An if not null statement"
  },
  "If instanceof statement": {
    "prefix": "if",
    "body": [
      "if (${1:varName} instanceof ${2:$TM_FILENAME_BASE}) {",
      "    $0",
      "}"
    ],
    "description": "An if instanceof statement"
  },
  "If instanceof statement then cast": {
    "prefix": "if",
    "body": [
      "if (${1:varName} instanceof ${2:$TM_FILENAME_BASE}) {",
      "    $2 ${3:varName2} = ($2) $1;",
      "    $0",
      "}"
    ],
    "description": "An if instanceof statement then cast"
  },
  "If not instanceof statement": {
    "prefix": "if",
    "body": [
      "if (!(${1:varName} instanceof ${2:$TM_FILENAME_BASE})) {",
      "    $0",
      "}"
    ],
    "description": "An if not instanceof statement"
  },
  "If empty statement": {
    "prefix": "if",
    "body": [
      "if (${1:varName}.isEmpty()) {",
      "    $0",
      "}"
    ],
    "description": "An if empty statement"
  },
  "If not empty statement": {
    "prefix": "if",
    "body": [
      "if (!${1:varName}.isEmpty()) {",
      "    $0",
      "}"
    ],
    "description": "An if not empty statement"
  },
  "If not null and not empty statement": {
    "prefix": "if",
    "body": [
      "if ((${1:varName} != null) && !${1:varName}.isEmpty()) {",
      "    $0",
      "}"
    ],
    "description": "An if not null and not empty statement"
  },
  "If null or empty statement": {
    "prefix": "if",
    "body": [
      "if ((${1:varName} == null) || ${1:varName}.isEmpty()) {",
      "    $0",
      "}"
    ],
    "description": "An if null or empty statement"
  },
  "If null or condition statement": {
    "prefix": "if",
    "body": [
      "if ((${1:varName} == null) || ($2)) {",
      "    $0",
      "}"
    ],
    "description": "An if null or condition statement"
  },
  "If not null and condition statement": {
    "prefix": "if",
    "body": [
      "if ((${1:varName} != null) && ($2)) {",
      "    $0",
      "}"
    ],
    "description": "An if not null and condition statement"
  },
  "If ternary statement": {
    "prefix": "if",
    "body": [
      "(($1) ? $2 : $3)$0"
    ],
    "description": "An if ternary statement"
  },
  "If null ternary statement": {
    "prefix": "if",
    "body": [
      "((${1:varName} == null) ? $2 : $3)$0"
    ],
    "description": "An if null ternary statement"
  },
  "If not null ternary statement": {
    "prefix": "if",
    "body": [
      "((${1:varName} != null) ? $2 : $3)$0"
    ],
    "description": "An if not null ternary statement"
  },
  "Else statement": {
    "prefix": "else",
    "body": [
      "else {",
      "    $0",
      "}"
    ],
    "description": "An else statement"
  },
  "Switch statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:varName}) {",
      "    case ${2:value}:",
      "        $0",
      "        break;",
      "    default:",
      "        break;",
      "}"
    ],
    "description": "A switch statement"
  },
  "Case break statement": {
    "prefix": "case",
    "body": [
      "case ${1:value}:",
      "    $0",
      "    break;"
    ],
    "description": "A case break statement"
  },
  "Case return statement": {
    "prefix": "case",
    "body": [
      "case ${1:value}:",
      "    return $0;"
    ],
    "description": "A case return statement"
  },
  "Constant": {
    "prefix": "const",
    "body": [
      "${1|private ,public ,protected , |}static final${2| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:CONST_NAME} = ${4:VALUE};",
      "$0"
    ],
    "description": "A constant"
  },
  "Public constant": {
    "prefix": "const",
    "body": [
      "public static final${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:CONST_NAME} = ${3:VALUE};",
      "$0"
    ],
    "description": "A public constant"
  },
  "Private constant": {
    "prefix": "const",
    "body": [
      "private static final${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:CONST_NAME} = ${3:VALUE};",
      "$0"
    ],
    "description": "A private constant"
  },
  "Try block": {
    "prefix": "try",
    "body": [
      "try {",
      "    $0",
      "}"
    ],
    "description": "A try block"
  },
  "Try with resources block": {
    "prefix": "tryresource",
    "body": [
      "try ($1) {",
      "    $0",
      "}"
    ],
    "description": "A try with resources block"
  },
  "Catch block": {
    "prefix": "catch",
    "body": [
      "catch (${1:Exception} ex) {",
      "    $0",
      "}"
    ],
    "description": "A catch block"
  },
  "Finally block": {
    "prefix": "finally",
    "body": [
      "finally {",
      "    $0",
      "}"
    ],
    "description": "A finally block"
  },
  "Try catch": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "    $TM_SELECTED_TEXT",
      "} catch (${1:Exception} ex) {",
      "    $0",
      "}"
    ],
    "description": "A try catch block around the selected text"
  },
  "Try catch finally": {
    "prefix": "trycatchfinally",
    "body": [
      "try {",
      "    $TM_SELECTED_TEXT",
      "} catch (${1:Exception} ex) {",
      "    $0",
      "} finally {",
      "    ",
      "}"
    ],
    "description": "A try catch finally block around the selected text"
  },
  "Throw exception": {
    "prefix": "throw",
    "body": [
      "throw $0;"
    ],
    "description": "Throw a exception"
  },
  "Throw new exception": {
    "prefix": "throw",
    "body": [
      "throw new ${1:Exception}($0);"
    ],
    "description": "Throw a new exception"
  },
  "Throw RuntimeException": {
    "prefix": "throw",
    "body": [
      "throw new RuntimeException($0);"
    ],
    "description": "Throw a new RuntimeException"
  },
  "Throw UnsupportedOperationException": {
    "prefix": "throw",
    "body": [
      "throw new UnsupportedOperationException($0);"
    ],
    "description": "Throw a new UnsupportedOperationException"
  },
  "Throw IllegalArgumentException": {
    "prefix": "throw",
    "body": [
      "throw new IllegalArgumentException($0);"
    ],
    "description": "Throw a new IllegalArgumentException"
  },
  "Throw IllegalStateException": {
    "prefix": "throw",
    "body": [
      "throw new IllegalStateException($0);"
    ],
    "description": "Throw a new IllegalStateException"
  },
  "Field": {
    "prefix": "field",
    "body": [
      "${1|private,public,protected, |}${2| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:fieldName};",
      "$0"
    ],
    "description": "A field"
  },
  "Final field": {
    "prefix": "field",
    "body": [
      "${1|private,public,protected, |} final${2| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:fieldName};",
      "$0"
    ],
    "description": "A final field"
  },
  "Field = value": {
    "prefix": "field",
    "body": [
      "${1|private,public,protected, |}${2| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:fieldName} = ${4:defaultValue};",
      "$0"
    ],
    "description": "A field with default value"
  },
  "Final field = value": {
    "prefix": "field",
    "body": [
      "${1|private,public,protected, |}${2| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:fieldName} = ${4:defaultValue};",
      "$0"
    ],
    "description": "A final field with value"
  },
  "Private field": {
    "prefix": "field",
    "body": [
      "private${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:fieldName};",
      "$0"
    ],
    "description": "A private field"
  },
  "Private final field": {
    "prefix": "field",
    "body": [
      "private final${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:fieldName};",
      "$0"
    ],
    "description": "A private final field"
  },
  "Private field = value": {
    "prefix": "field",
    "body": [
      "private${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:fieldName} = ${3:defaultValue};",
      "$0"
    ],
    "description": "A private field with default value"
  },
  "Private final field = value": {
    "prefix": "field",
    "body": [
      "private final${1| , String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${2:fieldName} = ${3:defaultValue};",
      "$0"
    ],
    "description": "A private final field with value"
  },
  "Parameter": {
    "prefix": "param",
    "body": [
      "${1|Void,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:paramName}$0"
    ],
    "description": "A parameter"
  },
  "Lambda 0 arg": {
    "prefix": "l0s",
    "body": [
      "() -> $0"
    ],
    "description": "A simple lambda without arguments"
  },
  "Lambda block 0 arg": {
    "prefix": "l0",
    "body": [
      "() -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block without arguments"
  },
  "Lambda 1 arg": {
    "prefix": "l1s",
    "body": [
      "${1:a} -> $0"
    ],
    "description": "A simple lambda with 1 argument"
  },
  "Lambda block 1 arg": {
    "prefix": "l1",
    "body": [
      "${1:a} -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 1 argument"
  },
  "Lambda 2 args": {
    "prefix": "l2s",
    "body": [
      "(${1:a}, ${2:b}) -> $0"
    ],
    "description": "A simple lambda with 2 arguments"
  },
  "Lambda block 2 args": {
    "prefix": "l2",
    "body": [
      "(${1:a}, ${2:b}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 2 arguments"
  },
  "Lambda 3 args": {
    "prefix": "l3s",
    "body": [
      "(${1:a}, ${2:b}, ${3:c}) -> $0"
    ],
    "description": "A simple lambda with 3 arguments"
  },
  "Lambda block 3 args": {
    "prefix": "l3",
    "body": [
      "(${1:a}, ${2:b}, ${3:c}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 3 arguments"
  },
  "Lambda 4 args": {
    "prefix": "l4s",
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}) -> $0"
    ],
    "description": "A simple lambda with 4 arguments"
  },
  "Lambda block 4 args": {
    "prefix": "l4",
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 4 arguments"
  },
  "Lambda 5 args": {
    "prefix": "l5s",
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e}) -> $0"
    ],
    "description": "A simple lambda with 5 arguments"
  },
  "Lambda block 5 args": {
    "prefix": "l5",
    "body": [
      "(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e}) -> {",
      "    $0",
      "}"
    ],
    "description": "A lambda block with 5 arguments"
  },
  "For loop over sequence": {
    "prefix": "for",
    "body": [
      "for (int i = ${1:0}; i <= ${2:10}; i++) {",
      "    $0",
      "}"
    ],
    "description": "A for loop over sequence"
  },
  "Countdown for loop": {
    "prefix": "for",
    "body": [
      "for (int i = ${1:10}; i >= ${2:0}; i--) {",
      "    $0",
      "}"
    ],
    "description": "A countdown for loop"
  },
  "For loop over array": {
    "prefix": "for",
    "body": [
      "for (int i = 0; i < ${1:array}.length; i++) {",
      "    $0",
      "}"
    ],
    "description": "A for loop over array"
  },
  "For loop over reverse array": {
    "prefix": "for",
    "body": [
      "for (int i = (${1:array}.length - 1); i >= 0; i--) {",
      "    $0",
      "}"
    ],
    "description": "A for loop over reverse array"
  },
  "For loop over iterable": {
    "prefix": "foreach",
    "body": [
      "for (${1| ,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:varName} : ${3:values}) {",
      "    $0",
      "}"
    ],
    "description": "A for loop over iterable"
  },
  "While loop": {
    "prefix": "while",
    "body": [
      "while ($1) {",
      "    $0",
      "}"
    ],
    "description": "A while loop"
  },
  "Do-while loop": {
    "prefix": "while",
    "body": [
      "do {",
      "    $0",
      "} while ($1);"
    ],
    "description": "A do-while loop"
  },
  "Main method": {
    "prefix": "main",
    "body": [
      "public static void main(String[] args) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A main method"
  },
  "Method": {
    "prefix": "method",
    "body": [
      "${1|private,public,protected, |}${2| , void, String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:methodName}($4) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A method"
  },
  "Static method": {
    "prefix": "method",
    "body": [
      "${1|private,public,protected, |} static${2| , void, String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:methodName}($4) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A static method"
  },
  "Private method": {
    "prefix": "method",
    "body": [
      "private${2| , void, String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:methodName}($4) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A private method"
  },
  "Private static method": {
    "prefix": "method",
    "body": [
      "private static${2| , void, String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:methodName}($4) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A private static method"
  },
  "Public method": {
    "prefix": "method",
    "body": [
      "public${2| , void, String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:methodName}($4) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A public method"
  },
  "Public static method": {
    "prefix": "method",
    "body": [
      "public static${2| , void, String, int, Integer, long, Long, float, Float, double, Double, boolean, Boolean, short, Short, byte, Byte, char, Character, BigDecimal, StringBuilder, LocalDate, LocalDateTime, ZonedDateTime, LocalTime, Instant, YearMonth, Month, Year, MonthDay, DayOfWeek, Period, Duration, Date, Class<?>, Object, Object[], Consumer<>, BiConsumer<>, Predicate<>, BiPredicate<>, Function<>, BiFunction<>, Supplier<>, Optional<>, List<>, Set<>, Map<>, Collection<>, Stream<>|} ${3:methodName}($4) {",
      "    $0",
      "}",
      ""
    ],
    "description": "A public static method"
  },
  "New": {
    "prefix": "new",
    "body": [
      "new ${1:Object}($0)"
    ],
    "description": "A new instance"
  },
  "Cast": {
    "prefix": "cast",
    "body": [
      "${1| ,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:varName} = ($1) ${3:obj};",
      "$0"
    ],
    "description": "Cast a object"
  },
  "Equals than": {
    "prefix": "eq",
    "body": [
      "Objects.equals(${2:value1}, ${1:value2})$0"
    ],
    "description": "null-safe equals than"
  },
  "Equals than member": {
    "prefix": "eqm",
    "body": [
      "Objects.equals(${1:this}.${2:fieldOrMethod}, ${3:o}.$2)$0"
    ],
    "description": "null-safe equals than member"
  },
  "Equals method": {
    "prefix": "equals",
    "body": [
      "@Override",
      "public boolean equals(Object obj) {",
      "    if (this == obj) {",
      "        return true;",
      "    }",
      "    if (obj instanceof ${1:$TM_FILENAME_BASE}) {",
      "        $1 ${2:o} = ($1) obj;",
      "",
      "        return ${3:Objects.equals(this.getId(), $2.getId())}$0;",
      "    }",
      "    return false;",
      "}",
      ""
    ],
    "description": "An equals method"
  },
  "Hashcode method": {
    "prefix": "hashcode",
    "body": [
      "@Override",
      "public int hashCode() {",
      "    return Objects.hashCode(${1:getId()});",
      "}",
      "$0"
    ],
    "description": "A hashcode method"
  },
  "@Override": {
    "prefix": "@o",
    "body": [
      "@Override"
    ],
    "description": "A @Override annotation"
  },
  "printl": {
    "prefix": "print",
    "body": [
      "System.out.print(\"$1\");$0"
    ],
    "description": "Prints a String"
  },
  "println": {
    "prefix": "println",
    "body": [
      "System.out.println(\"$1\");$0"
    ],
    "description": "Prints a String and then terminate the line"
  },
  "printf": {
    "prefix": "printf",
    "body": [
      "System.out.printf(\"${1:%s}\", ${2:value});$0"
    ],
    "description": "Prints a formatted String"
  },
  "printfn": {
    "prefix": "printfn",
    "body": [
      "System.out.printf(\"${1:%s}\\n\", ${2:value});$0"
    ],
    "description": "Prints a formatted String and then terminate the line"
  },
  "printv": {
    "prefix": "printv",
    "body": [
      "System.out.println(\"${1:varName} = \" + $1);$0"
    ],
    "description": "Prints the variable value"
  },
  "printfv": {
    "prefix": "printfv",
    "body": [
      "System.out.printf(\"${1:varName} = ${2:%s\\n}\", $1);$0"
    ],
    "description": "Prints the formatted variable value"
  },
  "Return": {
    "prefix": "return",
    "body": [
      "return $0;"
    ],
    "description": "A return"
  },
  "Return null": {
    "prefix": "return",
    "body": [
      "return null;"
    ],
    "description": "A return null"
  },
  "Return true": {
    "prefix": "return",
    "body": [
      "return true;"
    ],
    "description": "A return true"
  },
  "Return false": {
    "prefix": "return",
    "body": [
      "return false;"
    ],
    "description": "A return false"
  },
  "Return this": {
    "prefix": "return",
    "body": [
      "return this;"
    ],
    "description": "A return this"
  },
  "Variable": {
    "prefix": "var",
    "body": [
      "${1| ,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:varName};",
      "$0"
    ],
    "description": "A local variable"
  },
  "Variable = value": {
    "prefix": "var",
    "body": [
      "${1| ,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|} ${2:varName} = ${3:defaultValue};",
      "$0"
    ],
    "description": "A local variable"
  },
  "Variable = StringBuilder": {
    "prefix": "var",
    "body": [
      "String ${1:varName} = new StringBuilder()",
      "    $0",
      "    .toString();"
    ],
    "description": "A local string variable from StringBuilder"
  },
  "String builder": {
    "prefix": "stringb",
    "body": [
      "StringBuilder ${1:builder} = new StringBuilder()",
      "    $0",
      "    .toString();"
    ],
    "description": "A local StringBuilder variable"
  }
}
