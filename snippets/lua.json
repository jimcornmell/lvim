{
  "api": {
    "body": [
      "local api = vim.api"
    ],
    "description": "",
    "prefix": "__lapi"
  },
  "apifun": {
    "body": [
      "vim.api.nvim_${1:buf}_${2:get}_${3:name}"
    ],
    "description": "",
    "prefix": "__api."
  },
  "describe": {
    "body": [
      "describe('${1:Title}', function()",
      "    ${2}",
      "end)"
    ],
    "description": "",
    "prefix": "__describe"
  },
  "doc": {
    "body": [
      "-----------------------------------------------------------------------------//",
      "-- ${0:document}",
      "-----------------------------------------------------------------------------//"
    ],
    "description": "",
    "prefix": "__doc"
  },
  "fmt": {
    "body": [
      "local fmt = string.format"
    ],
    "description": "",
    "prefix": "__lfmt"
  },
  "fn": {
    "body": [
      "local fn = vim.fn"
    ],
    "description": "",
    "prefix": "__lfn"
  },
  "for": {
    "body": [
      "for ${1:i}=${2:1},${3:10} do",
      "    ${0:print(i)}",
      "end"
    ],
    "description": "for i=1,10",
    "prefix": "__for",
    "scope": "source.lua"
  },
  "fori": {
    "body": [
      "for ${1:i},${2:v} in ipairs(${3:table_name}) do",
      "    ${0:print(i,v)}",
      "end"
    ],
    "description": "for i,v in ipairs()",
    "prefix": "__fori",
    "scope": "source.lua"
  },
  "forp": {
    "body": [
      "for ${1:k},${2:v} in pairs(${3:table_name}) do",
      "    ${0:print(k,v)}",
      "end"
    ],
    "description": "for k,v in pairs()",
    "prefix": "__forp",
    "scope": "source.lua"
  },
  "fun": {
    "body": [
      "function ${1:function_name}(${2:...})",
      "    ${0:-- body}",
      "end"
    ],
    "description": "function",
    "prefix": "__fun",
    "scope": "source.lua"
  },
  "function": {
    "body": [
      "function ${1:function_name}(${2:...})",
      "    ${0:-- body}",
      "end"
    ],
    "description": "function",
    "prefix": "__function",
    "scope": "source.lua"
  },
  "getmetatable": {
    "body": [
      "getmetatable(${1:object})"
    ],
    "description": "getmetatable (object)",
    "prefix": "__getmetatable",
    "scope": "source.lua"
  },
  "if": {
    "body": [
      "if ${1:condition} then",
      "    ${0:-- body}",
      "end"
    ],
    "description": "if",
    "prefix": "__if",
    "scope": "source.lua"
  },
  "ifel": {
    "body": [
      "if ${1:condition} then",
      "    ${2:-- body}",
      "else",
      "    ${0:-- body}",
      "end"
    ],
    "description": "ifel",
    "prefix": "__ifel",
    "scope": "source.lua"
  },
  "inspect": {
    "body": [
      "print(\"${1}: \" .. vim.inspect(${1}))"
    ],
    "description": "",
    "prefix": "__vi"
  },
  "ipairs": {
    "body": [
      "ipairs(${0:...})"
    ],
    "description": "ipairs (t)",
    "prefix": "__ipairs",
    "scope": "source.lua"
  },
  "load": {
    "body": [
      "load(${0:...})"
    ],
    "description": "load (func [, chunkname])",
    "prefix": "__load",
    "scope": "source.lua"
  },
  "lua_log_object": {
    "body": [
      "local function tprint (tbl, indent)",
      "  if not indent then indent = 0 end",
      "  local toprint = string.rep(\" \", indent) .. \"{\\r\"",
      "\"",
      "  indent = indent + 2",
      "  for k, v in pairs(tbl) do",
      "    toprint = toprint .. string.rep(\" \", indent)",
      "    if (type(k) == \"number\") then",
      "      toprint = toprint .. \"[\" .. k .. \"] = \"",
      "    elseif (type(k) == \"string\") then",
      "      toprint = toprint  .. k ..  \"= \"",
      "    end",
      "    if (type(v) == \"number\") then",
      "      toprint = toprint .. v .. \",\\r\"",
      "\"",
      "    elseif (type(v) == \"string\") then",
      "      toprint = toprint .. \"\\\"\" .. v .. \"\\\",\\r\"",
      "\"",
      "    elseif (type(v) == \"table\") then",
      "      toprint = toprint .. tprint(v, indent + 2) .. \",\\r\"",
      "\"",
      "    else",
      "      toprint = toprint .. \"\\\"\" .. tostring(v) .. \"\\\",\\r\"",
      "\"",
      "    end",
      "  end",
      "  toprint = toprint .. string.rep(\" \", indent-2) .. \"}\"",
      "  return toprint",
      "end",
      "",
      "local fw = io.open(\"~/l.log\", \"w\")",
      "fw:write(\"--------------------\")",
      "fw:write(tprint(lvim.builtin.lualine))",
      "fw:write(tprint(lvim.builtin))",
      "fw:write(tprint(lvim))",
      "fw:close()"
    ],
    "description": "Chunk of code to log object to text file",
    "prefix": "__lua_log_object"
  },
  "param": {
    "body": [
      "--- @param ${1:name} ${2:type}"
    ],
    "description": "Add annotation",
    "prefix": "__param"
  },
  "table.concat": {
    "body": [
      "table.concat(${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index})"
    ],
    "description": "table.concat",
    "prefix": "__table.concat",
    "scope": "source.lua"
  },
  "table.insert": {
    "body": [
      "table.insert(${1:list},${2: [pos,]}${3: value})"
    ],
    "description": "table.insert",
    "prefix": "__table.insert",
    "scope": "source.lua"
  },
  "table.move": {
    "body": [
      "table.move(${0:...})"
    ],
    "description": "table.move (a1, f, e, t [,a2])",
    "prefix": "__table.move",
    "scope": "source.lua"
  },
  "table.pack": {
    "body": [
      "table.pack(${0:...})"
    ],
    "description": "table.pack (...)",
    "prefix": "__table.pack",
    "scope": "source.lua"
  },
  "table.remove": {
    "body": [
      "table.remove(${1:list},${2: [pos,]})"
    ],
    "description": "table.remove",
    "prefix": "__table.remove",
    "scope": "source.lua"
  },
  "table.sort": {
    "body": [
      "table.sort(${1:tablename}${2:, sortfunction})"
    ],
    "description": "table.sort",
    "prefix": "__table.sort",
    "scope": "source.lua"
  },
  "table.unpack": {
    "body": [
      "table.unpack(${0:...})"
    ],
    "description": "table.unpack (list [, i [, j]])",
    "prefix": "__table.unpack",
    "scope": "source.lua"
  },
  "tonumber": {
    "body": [
      "tonumber(${1:e}${2:[, base]})"
    ],
    "description": "tonumber (e [, base])",
    "prefix": "__tonumber",
    "scope": "source.lua"
  },
  "tostring": {
    "body": [
      "tostring(${1:v})"
    ],
    "description": "tostring (v)",
    "prefix": "__tostring",
    "scope": "source.lua"
  },
  "type": {
    "body": [
      "type(${1:v})"
    ],
    "description": "type (v)",
    "prefix": "__type",
    "scope": "source.lua"
  },
  "unpack": {
    "body": [
      "unpack(${0:...})"
    ],
    "description": "unpack (list [, i [, j]])",
    "prefix": "__unpack",
    "scope": "source.lua"
  }
}
